cmake_minimum_required(VERSION 3.19)
project(TEngine)

set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS 1)

      
include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup()

message("${CONAN_PKG_LIBS} ${CONAN_SYSTEM_LIBS} ${CONAN_FRAMEWORKS_FOUND}")
if(MSVC)
    add_compile_definitions(-D TE_WINDOWS)
    add_compile_definitions(-D _WIN32_WINDOWS)
    add_compile_definitions(-D WIN32_LEAN_AND_MEAN)
    add_compile_definitions(-D _HAS_ITERATOR_DEBUGGING=0)
    add_compile_definitions(-D _CRT_SECURE_NO_WARNINGS)
    add_compile_definitions(-D NOMINMAX)
    if(Config_API STREQUAL "OpenGL")
        add_compile_definitions(-D TE_OPENGL)
    elseif(Config_API STREQUAL "DirectX")
        add_compile_definitions(-D TE_DX11)
    endif()
    add_compile_options("/std:c++17")
elseif(UNIX)
    #    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-long-long -pedantic -std=c++20 -stdlib=libc++ -ferror-limit=0")
    add_compile_options(-Wall -Wno-long-long -pedantic -std=c++20 -stdlib=libc++ -ferror-limit=0)
    add_compile_definitions(TE_LINUX TE_OPENGL)
endif()

add_subdirectory(Code)
