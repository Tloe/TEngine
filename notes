These notes are not up to date.

Any externals libraries being build needs to be built with these flags:
Debug:
_HAS_ITERATOR_DEBUGGING=0
Release
_HAS_ITERATOR_DEBUGGING=0

building assimp: set_target_properties(assimp PROPERTIES COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")

Download and install DirectX SDK (june 2010)

Download and install cg runtime (http://developer.nvidia.com/cg-toolkit at the bottom)

build boost: Externals\boost_1_49_0\
	-- run bootstrap.bat
	-- run b2.exe

Downlad and install CMAKE
	-- Specify source: root of TEngine checkout folder
	-- Create your own folder where you want the project/build files
	-- Press config
	-- Press generate

Make sure theres a glew32.lib (windows) or libGLEW.so (linux) in the lib folder
of the Code/Glew folder. Otherwise build them.

If you need to build jsoncpp: Make sure properties->c++->code generation->runtime
library is the same as the project its used in.

Visual Studio:
If you need to access files in the working directory of the executable the
working dir needs to be set to $(TargetDir) .
(right click project->properties->configuration properties->Debug)

The ZERO_MAKE project is used to run cmake from within Visual Studio.

If there are changes to the CMake files you should first build ZERO_MAKE,
then the ExcludeFilesFromBuildTarget project. Then select startup project
and build it normaly.

NB! Theres a bug when cmake first generate the visual studio project where
you only get Debug and Relase build options. Go into one of the CmakeLists.txt
files in one of the projects and make sure the file is touched and rebuild
with ZERO_CHECK and you should get the Debug and Relase build options for both
DirectX and OpenGL
