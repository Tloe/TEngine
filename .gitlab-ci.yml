.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

stages:
  - build_docker_images
  - build

build_ubuntu_image:
  only:
    changes:
      - Docker/Ubuntu/*
  stage: build_docker_images
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd Docker/Ubuntu
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t registry.gitlab.com/tloe/tengine:ubuntu .
    - docker push registry.gitlab.com/tloe/tengine:ubuntu



build_ubuntu:
  image: registry.gitlab.com/tloe/tengine:ubuntu
  services: 
    - docker:dind
  stage: build
  script:
    - mkdir -p ~/.conan/profiles
    - cp Utils/CMake/profiles/* ~/.conan/profiles/
    - conan export Utils/CMake/luajit/luajit.py
    - mkdir build
    - cd build
    - export CC=clang
    - export CXX=clang++
#    - conan config install ../remotes.txt 
    - conan install .. --profile tengine_release --build=missing
    - cmake ../
    - make 

#When working on vs: open cmake folder -> select config -> generate cmake -> Change view in solution explorer to cmake -> Select target to build
build_windows:
   extends:
   - .shared_windows_runners
   stage: build
   script:
   - choco install -y conan cmake ninja choco #visualstudio2019-workload-vctools #visualstudio2019community
   - $env:Path += ';C:\Program Files\CMake\bin'
   - $env:Path += ';C:\Program Files\ninja'
   - Utils\vs\buildenv.bat
   - Get-ChildItem -Path 'C:\Program Files (x86)\' -Recurse -ErrorAction SilentlyContinue rc.exe # find file
   - mkdir build
   - cd build
   - cmake -G "Ninja" -DCMAKE_BUILD_TYPE:STRING="Debug" -DCONAN_CMD:FILEPATH="conan.exe" -DConfig_API:STRING="OpenGL" -DCMAKE_C_COMPILER:FILEPATH="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.26.28801\bin\Hostx64\x64\cl.exe" -DCMAKE_CXX_COMPILER:FILEPATH="C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.26.28801\bin\Hostx64\x64\cl.exe" -DCMAKE_MAKE_PROGRAM="ninja.exe" ..
   - ninja
